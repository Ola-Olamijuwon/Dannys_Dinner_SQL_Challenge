CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner ;

CREATE TABLE dannys_diner.sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE dannys_diner.menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE dannys_diner.members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
-- CREATED A VIEW THAT HAS ALL THE TABLES MERGED
CREATE VIEW danny AS
SELECT customer_id, order_date, join_date, product_name, product_id, price
FROM dannys_diner.members
FULL JOIN dannys_diner.sales
USING (customer_id)
FULL JOIN dannys_diner.menu
USING (product_id)
ORDER BY order_date;

--									TABLES
SELECT * FROM dannys_diner.members;
		 SELECT * FROM dannys_diner.menu;
SELECT * FROM dannys_diner.sales;
-- VIEW
		SELECT * FROM danny;

-- 							Case Study Questions

-- 1. What is the total amount each customer spent at the restaurant?

SELECT customer_id, SUM (price)::MONEY total_amount
FROM danny
GROUP BY 1
ORDER BY 2 DESC;

-- 2. How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT(order_date)) date
FROM danny
GROUP BY 1;

-- 3. What was the first item from the menu purchased by each customer?

SELECT customer_id, order_date, product_name
FROM danny
WHERE order_date = '20210101'
ORDER BY 1;

-- ALTERNATIVE (IN SITUATIONS WHERE ORDER DATE FOR EVERY CUSTOMER ISN'T THE SAME OR KNOWN)

WITH first_purchase AS 
(SELECT customer_id, order_date, product_name,
DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY order_date) rank
FROM danny)
SELECT customer_id, product_name
FROM first_purchase
WHERE rank = 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT product_name, COUNT (product_id) purchase_count
FROM danny
GROUP BY 1
ORDER BY 2 DESC;

-- 5. Which item was the most popular for each customer?

WITH popular AS
(SELECT customer_id, product_name, COUNT (product_name) count,
RANK () OVER (PARTITION BY customer_id ORDER BY COUNT(product_name) DESC) rank
FROM danny
GROUP BY 1,2)
SELECT customer_id, product_name, count 
FROM popular
WHERE rank = 1;

-- 6. Which item was purchased first by the customer after they became a member?

WITH first_purchase AS
(SELECT customer_id, product_name, join_date, order_date,
 RANK() OVER (PARTITION BY customer_id ORDER BY order_date) rank
FROM danny
WHERE order_date >= join_date)
SELECT customer_id, product_name, order_date
FROM first_purchase
WHERE rank = 1;

-- 7. Which item was purchased just before the customer became a member?

WITH before AS
(SELECT customer_id, product_name, join_date, order_date,
 RANK() OVER (PARTITION BY join_date ORDER BY order_date DESC) rank
FROM danny
WHERE order_date < join_date)
SELECT customer_id, product_name, order_date
FROM before
WHERE rank = 1;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT customer_id, COUNT (product_name) items, SUM(price) amount 
FROM danny
WHERE order_date < join_date
GROUP BY 1;

-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT customer_id,
SUM(CASE 
	WHEN product_name = 'sushi' THEN price * 20
	ELSE price * 10
	END) AS points
FROM danny
GROUP BY 1
ORDER BY 1;

/* 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, 
not just sushi - how many points do customer A and B have at the end of January? */

SELECT customer_id,
	SUM(CASE
		WHEN order_date BETWEEN join_date AND join_date + 6 THEN price * 20
		ELSE price * 10
		END) point
FROM danny
WHERE order_date BETWEEN join_date AND '2021-1-31'
GROUP BY 1
ORDER BY 2 DESC;


/* BONUS QUESTIONS
	MEMBERS TABLE 
*/

SELECT customer_id, order_date, product_name, price,
	CASE 
	WHEN order_date >= join_date THEN 'Y'
	ELSE 'N'
	END member
FROM danny
ORDER BY 1,;

-- RANKING

WITH rank AS 
(SELECT customer_id, order_date, product_name, price,
	CASE 
	WHEN order_date >= join_date THEN 'Y'
	ELSE 'N'
	END member
FROM danny
ORDER BY 1,2)
SELECT *,
CASE
	WHEN member = 'N' THEN NULL
	ELSE DENSE_RANK() OVER (PARTITION BY customer_id, member ORDER BY order_date)
	END ranking
FROM rank;
